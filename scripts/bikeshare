#!/usr/bin/env python
import os
import sys

from joblib import Memory, dump

from sklearn.ensemble import RandomForestRegressor
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.linear_model import SGDRegressor
from sklearn.metrics import mean_absolute_error

from bikeshare.data import load_data
from bikeshare.model import BikeshareRegression, CombinedModel
from bikeshare.preprocessing import (TrendRemover, FeatureTransformer,
                                     LogTransform)
from bikeshare.plotting import (plot_prediction, plot_grouped_usage,
                                plot_grouped_usage_bias, plot_trendremover_real)

from sklearn.model_selection import (train_test_split, GridSearchCV, TimeSeriesSplit)
from sklearn.pipeline import make_pipeline


MEMORY = Memory('.joblib_cache', verbose=0)


def get_regressor_params(reg_str):
    seed = 42
    if reg_str == 'linear':
        regressor = SGDRegressor(loss='huber', penalty='none')
        parameters = dict(featuretransformer__remove_year=[True, False],
                          featuretransformer__categorical=[True])
    elif reg_str == 'randomforest':
        regressor = RandomForestRegressor(n_jobs=None, criterion='mse', random_state=seed)
        parameters = dict(bikeshareregression__regressor__n_estimators=[50, 60, 100],
                          bikeshareregression__regressor__min_samples_split=[8, 12, 16],
                          featuretransformer__remove_year=[False, True],
                          featuretransformer__categorical=[True, False])
    elif reg_str == 'gaussianprocess':
        regressor = GaussianProcessRegressor()
        parameters = dict(bikeshareregression__regressor__kernel=[None],
                          featuretransformer__remove_year=[True, False])
    elif reg_str == 'mlperceptron':
        regressor = MLPRegressor(early_stopping=True)
        parameters = dict(bikeshareregression__regressor__learning_rate_init=[1e-4, 1e-3, 1e-2],
                          bikeshareregression__regressor__hidden_layer_sizes=[100, 1000, 1500],
                          featuretransformer__remove_year=[True, False])
    return regressor, parameters


@MEMORY.cache
def run_gridsearch(X_train, y_train):
    gridsearches = []
    for rm_trend in [True, False]:
        # fit trend remover on whole training set.
        # can be done inside BikeshareRegression if more data is available.
        trend_remover = make_pipeline(
            TrendRemover(remove_trend=rm_trend),
            LogTransform()).fit(y_train)

        for reg_str in ['linear', 'randomforest']:
            regressor, parameters = get_regressor_params(reg_str)
            pipeline = make_pipeline(FeatureTransformer(),
                                     BikeshareRegression(trend_remover, regressor))
            reg = GridSearchCV(pipeline, parameters, cv=TimeSeriesSplit(5),
                               n_jobs=-1, verbose=1)
            reg.fit(X_train, y_train)
            gridsearches.append(reg)
            print(reg_str, rm_trend, reg.best_score_)

    return sorted(gridsearches, key=lambda gs: gs.best_score_)[-1]


def main():
    if len(sys.argv) != 4:
        raise SystemExit("Usage: %s {data-dir} {model-output-dir} {plot-output-dir}" % sys.argv[0])
    data_dir = sys.argv[1]
    model_output_dir = sys.argv[2]
    plot_output_dir = sys.argv[3]
    os.makedirs(model_output_dir, exist_ok=True)
    os.makedirs(plot_output_dir, exist_ok=True)

    X, y = load_data(data_dir)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    plot_trendremover_real(X_train, y_train, plot_output_dir)

    best_reg_casual = run_gridsearch(X_train, y_train['casual']).best_estimator_
    best_reg_registered = run_gridsearch(X_train, y_train['registered']).best_estimator_
    best_reg_both = run_gridsearch(X_train, y_train['cnt']).best_estimator_

    combined = CombinedModel(best_reg_casual, best_reg_registered)
    print("Test set mean absolute error additive: %2.3f" %
          mean_absolute_error(y_test['cnt'], combined.predict(X_test)))
    print("Test set mean absolute error single  : %2.3f" %
          mean_absolute_error(y_test['cnt'], best_reg_both.predict(X_test)))

    plot_prediction(combined, X_train, y_train, X_test, y_test, plot_output_dir)
    plot_grouped_usage(best_reg_casual, best_reg_registered, data_dir, plot_output_dir)
    plot_grouped_usage_bias(best_reg_casual, best_reg_registered, data_dir, plot_output_dir)

    print("Retrain on all data")
    combined.fit(X, y)
    dump(combined, os.path.join(model_output_dir, 'final.model'))


if __name__ == '__main__':
    main()
